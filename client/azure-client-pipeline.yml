trigger: 
  branches:
    include:
    - dev
    - test
    - master
  paths:
    include:
    - 'client/'

pr: none

variables:
  arcName: 'coronai'
  imageName: 'coronaiDocker'
  MOHarcName: 'IDFDocker'
  AzureContainerRegistry: 'AzureContainerRegistry'
  MOHContainerRegistry: 'MOHContainerRegistry'
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  isTest: $[eq(variables['Build.SourceBranch'], 'refs/heads/test')]
  isDev: $[eq(variables['Build.SourceBranch'], 'refs/heads/dev')]

stages:
- stage:
  displayName: TestsAndBuildStage
  jobs:
  - job: BuildJob
    displayName: BuildJob
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.18'
      displayName: 'Install Node.js'

    - script: |
        echo "##vso[task.setvariable variable=REACT_APP_DB_API]$(DB_API_DEV)"
      condition: eq(variables.isDev,true)
      displayName: 'setting .env db route to dev route'

    - script: |
        echo "##vso[task.setvariable variable=REACT_APP_DB_API]$(DB_API_TEST)"
      condition: eq(variables.isTest,true)
      displayName: 'setting .env db route to test route'

    - script: |
        echo "##vso[task.setvariable variable=REACT_APP_DB_API]$(DB_API_PROD)"
      condition: eq(variables.isMaster,true)
      displayName: 'setting .env db route to prod route'

    - script: |
        cd client
        npm install
        npm run build
      displayName: 'npm build client'

    - task: Docker@2
      condition: eq(variables.isDev,true)
      continueOnError: 'false'
      displayName: Build and push Dev client image to container registry
      inputs:
        command: buildAndPush
        dockerfile: '**/client/Dockerfile'
        repository: '$(arcName)'
        azureSubscriptionEndpoint: '$(AzureContainerRegistry)'
        containerRegistry: '$(AzureContainerRegistry)'
        tags: |
          client-dev
          
    - task: Docker@2
      condition: eq(variables.isTest,true)
      continueOnError: 'false'
      displayName: Build and push test client image to container registry
      inputs:
        command: buildAndPush
        dockerfile: '**/client/Dockerfile'
        repository: '$(arcName)'
        azureSubscriptionEndpoint: '$(AzureContainerRegistry)'
        containerRegistry: '$(AzureContainerRegistry)'
        tags: |
          client-test

    - task: Docker@2
      condition: eq(variables.isMaster,true)
      continueOnError: 'false'
      displayName: Build and push master client image to container registry
      inputs:
        command: buildAndPush
        dockerfile: '**/client/Dockerfile'
        repository: '$(MOHarcName)'
        azureSubscriptionEndpoint: '$(MOHContainerRegistry)'
        containerRegistry: '$(MOHContainerRegistry)'
        tags: |
          client-master

  - job: 
    dependsOn: [BuildJob]
    displayName: SemanticRelease
    steps:  
    - task: NodeTool@0
      displayName: install NodeJs
      inputs:
        versionSpec: '10.18'

    - script: >
        npx -p semantic-release
        -p @semantic-release/git
        -p semantic-release-ado
        semantic-release
      env: { GH_TOKEN: $(GitHubToken) }
      displayName: 'Semantic release'
  
    - script: echo $(GH_TOKEN)
      displayName: 'Show next version'

# - stage: 
#   displayName: 'Deployment'
#     dependsOn: Build
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy job
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'azooinmyluggagepipelinesjavascriptdocker.aksnamespace'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: DownloadPipelineArtifact@2
#             inputs:
#               artifactName: 'manifests'
#               downloadPath: '$(System.ArtifactsDirectory)/manifests'

#           - task: KubernetesManifest@0
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               namespace: $(k8sNamespace)
#               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
            
#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes cluster
#             inputs:
#               action: deploy
#               namespace: $(k8sNamespace)
#               manifests: |
#                 $(System.ArtifactsDirectory)/manifests/deployment.yml
#                 $(System.ArtifactsDirectory)/manifests/service.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(containerRegistry)/$(imageRepository):$(tag)