trigger:
- shiranTestingCi
variables:
  azureSC: 'coronai'
  buildConfiguration: 'Release'
  location: 'North Europe'
  acrHostName: 'coronai.azurecr.io'
  arcName: 'coronai'
  rgName: 'spectrumFactory'
  imageName: 'coronaiDocker'
  webAppName: 'coronai'

stages:
- stage:
  displayName: TestsAndBuildStage
  jobs:
  - job:
    displayName: TestsAndBuildJob
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.18'
      displayName: 'Install Node.js'

    # - script: >
    #     npx -p semantic-release
    #     -p @semantic-release/git
    #     -p semantic-release-ado
    #     semantic-release
    #   env: { GH_TOKEN: $(GitHubToken) }
    #   displayName: 'Semantic release'

    # - script: echo $(GH_TOKEN)
    #   displayName: 'Show next version'

    - script: |
        cd client 
        npm install
        npm run build
      displayName: 'npm build client'

    - task: Docker@2
      displayName: Build an image to container registry
      inputs:
        repository: '$(arcName)'
        azureSubscriptionEndpoint: 'AzureSC'
        azureContainerRegistry: '$(acrHostName)'
        imageName: '$(imageName):(Build.BuildId)'
        useDefaultContext: false
        buildContext: '$(System.DefaultWorkingDirectory)/PublishedWebApp'

    # - task: Docker@1
    #   displayName: push an image to container registry
    #   inputs:
    #     command: 'Push an image'
    #     azureSubscriptionEndpoint: 'AzureSC'
    #     azureContainerRegistry: '$(acrHostName)'
    #     imageName: '$(imageName):(Build.BuildId)'

    - task: CopyFiles@2
      inputs:
        SourceFolder: 'client/'
        Contents: 'build/**' # Pull the build directory (React)
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: CopyFiles@2
      inputs:
        Contents: 'server/**' # Pull the server directory
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory) # dist or build files
        ArtifactName: 'bundle'
        displayName: 'Publish artifacts: drop'

# - stage: 
#   displayName: 'Deployment'
#     dependsOn: Build
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy job
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'azooinmyluggagepipelinesjavascriptdocker.aksnamespace'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: DownloadPipelineArtifact@2
#             inputs:
#               artifactName: 'manifests'
#               downloadPath: '$(System.ArtifactsDirectory)/manifests'

#           - task: KubernetesManifest@0
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               namespace: $(k8sNamespace)
#               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes cluster
#             inputs:
#               action: deploy
#               namespace: $(k8sNamespace)
#               manifests: |
#                 $(System.ArtifactsDirectory)/manifests/deployment.yml
#                 $(System.ArtifactsDirectory)/manifests/service.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(containerRegistry)/$(imageRepository):$(tag)